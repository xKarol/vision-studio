---
import { parseHTML } from "linkedom";
import type { HTMLAttributes } from "astro/types";

const html = await Astro.slots.render("default");
const { document } = parseHTML(html);

interface Props extends HTMLAttributes<"ul"> {
  cols?: { min: number; max: number }[];
  rows?: { min: number; max: number }[];
  spaceRows?: number;
}

const {
  cols = [
    { min: 1, max: 7 },
    { min: 8, max: 11 },
    { min: 7, max: 10 },
    { min: 2, max: 7 },
    { min: 7, max: 9 },
  ],
  rows = [
    { min: 1, max: 6 },
    { min: 1, max: 3 },
    { min: 6, max: 3 },
    { min: 9, max: 4 },
    { min: 12, max: 2 },
  ],
  spaceRows = 1,
  class: className,
  ...rest
} = Astro.props;

if (cols.length !== rows.length) {
  throw new Error("Cols and rows must have the same amount of elements.");
}

const elements = [...document.children];

const gridCols: Record<number, string> = {};
cols.forEach((col, index) => {
  gridCols[index + 1] = `${col.min} / ${col.max}`;
});

const calculateGridRow = (i: number, index: number) => {
  const gridRows: Record<number, string> = {};
  rows.forEach((row, idx) => {
    gridRows[idx + 1] = `${row.min} / span ${row.max}`;
  });

  if (i <= cols.length - 1) return gridRows[index];
  const rounds = Math.floor(i / cols.length);
  const allRowsHeight = (rows[rows.length - 1].min + spaceRows) * rounds;
  const elementRow = allRowsHeight + rows[index - 1].min;
  return `${elementRow} / span ${rows[index - 1].max}`;
};
---

<ul
  class="grid h-full min-h-screen auto-rows-max grid-cols-1 gap-4 lg:grid-cols-[repeat(10,1fr)]"
  class:list={[className]}
  {...rest}
>
  {
    elements.map((image, i) => {
      const index = (i % cols.length) + 1;
      return (
        <li
          style={{
            "--col": gridCols[index],
            "--row": calculateGridRow(i, index),
          }}
          class="md:col-[--col] md:row-[--row]"
        >
          <Fragment set:html={image} />
        </li>
      );
    })
  }
</ul>
