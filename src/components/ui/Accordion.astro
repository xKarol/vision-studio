---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {
  heading: string;
  content: string;
}

const { heading, content, class: className, ...rest } = Astro.props;
---

<div
  data-accordion="true"
  data-cursor="pointer"
  class:list={[
    "rounded-lg transition-colors data-[state=open]:bg-background-light",
    className,
  ]}
  {...rest}
>
  <h2 class="arrow relative m-0 cursor-pointer p-5 pr-10 text-lg">
    {heading}
  </h2>
  <div
    class="content max-h-0 overflow-hidden transition-all duration-300 ease-in-out lg:duration-500"
  >
    <p class="p-5">{content}</p>
  </div>
</div>

<script>
  const accordionElements = document.querySelectorAll(
    "[data-accordion='true'] h2",
  );

  accordionElements.forEach((accordion) =>
    accordion.addEventListener("click", toggleAccordion),
  );

  function toggleAccordion() {
    const items = document.querySelectorAll("[data-accordion='true']");
    // @ts-expect-error
    const thisItem = this.parentNode as HTMLElement;

    items.forEach((item) => {
      const state = thisItem.dataset.state;
      item.setAttribute(
        "data-state",
        thisItem == item ? (state === "open" ? "closed" : "open") : "closed",
      );
    });
  }
</script>

<style>
  .arrow::after {
    content: "";
    position: absolute;
    right: 25px;
    top: 50%;
    transition: all 0.2s ease-in-out;
    display: block;
    width: 8px;
    height: 8px;
    border-top: solid 1px #000;
    border-right: solid 1px #000;
    transform: translateY(-50%) rotate(135deg);
  }

  [data-accordion="true"][data-state="open"] .content {
    max-height: 400px;
  }

  [data-accordion="true"][data-state="open"] .arrow::after {
    transform: translateY(-50%) rotate(315deg);
  }
</style>
