---
import type { HTMLAttributes } from "astro/types";
import { parseHTML } from "linkedom";

interface Props extends HTMLAttributes<"div"> {}

const { class: className, ...rest } = Astro.props;

const html = await Astro.slots.render("default");
const { document } = parseHTML(html);

const slides = [...document.children].map((el) => {
  el.classList.add("embla__slide");
  return el;
});
---

<section class="embla m-auto w-full" class:list={[className]} {...rest}>
  <div class="embla__viewport">
    <div
      class="embla__container -ml-[--slide-spacing] flex touch-pan-y touch-pinch-zoom"
    >
      {
        slides.map((slide) => (
          <div class="embla__slide select-none">
            <Fragment set:html={slide} />
          </div>
        ))
      }
    </div>
  </div>
  <div class="embla-thumbs group mt-8 hidden justify-center sm:flex">
    <div
      style={{
        "--thumbs-width": `${0.85 * slides.length > 8 ? 8 : 0.85 * slides.length}rem`,
      }}
      class="embla-thumbs__viewport"
    >
      <div class="-ml-[--thumbs-slide-spacing] flex max-w-[--thumbs-width]">
        {
          slides.map(() => (
            <div class="group min-w-4">
              <button
                type="button"
                class="flex h-6 w-full items-center justify-center"
              >
                <div class="h-3 w-[0.0625rem] origin-bottom bg-black transition-transform group-data-[active='true']:scale-y-150" />
              </button>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style is:global>
  .embla-thumbs {
    --thumbs-slide-spacing: 0.8rem;
  }
  .embla-thumbs__viewport {
    overflow: hidden;
  }

  .embla {
    --slide-spacing: 1rem;
  }

  .embla__viewport {
    overflow: hidden;
  }
  .embla__container {
    backface-visibility: hidden;
  }

  .embla__slide {
    min-width: clamp(200px, 50vw, 400px);
    padding-left: var(--slide-spacing);
  }
</style>
<script>
  import EmblaCarousel from "embla-carousel";
  import { WheelGesturesPlugin } from "embla-carousel-wheel-gestures";

  const rootNode = document.querySelector(".embla")!;
  const viewportNode = rootNode.querySelector<HTMLElement>(".embla__viewport")!;

  const viewportNodeThumbCarousel = document.querySelector(
    ".embla-thumbs__viewport",
  ) as HTMLElement;

  const emblaApiThumb = EmblaCarousel(viewportNodeThumbCarousel, {
    containScroll: "keepSnaps",
    dragFree: true,
    loop: true,
    watchDrag: false,
  });

  const emblaApiMain = EmblaCarousel(
    viewportNode,
    {
      align: "center",
      loop: true,
      skipSnaps: true,
    },
    [
      WheelGesturesPlugin({
        target: document.body,
        forceWheelAxis: "y",
      }),
    ],
  );

  //thumbs
  const slidesThumbs = emblaApiThumb.slideNodes();
  const scrollToIndex = slidesThumbs.map(
    (_, index) => (): void => emblaApiMain.scrollTo(index),
  );
  slidesThumbs.forEach((slideNode, index) => {
    slideNode.addEventListener("click", scrollToIndex[index], false);
  });

  const toggleThumbBtnsState = (): void => {
    emblaApiThumb.scrollTo(emblaApiMain.selectedScrollSnap());
    const previous = emblaApiMain.previousScrollSnap();
    const selected = emblaApiMain.selectedScrollSnap();
    slidesThumbs[previous].setAttribute("data-active", "false");
    slidesThumbs[selected].setAttribute("data-active", "true");
  };

  emblaApiMain.on("select", toggleThumbBtnsState);
  emblaApiThumb.on("init", toggleThumbBtnsState);
</script>
