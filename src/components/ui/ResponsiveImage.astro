---
import type { HTMLAttributes } from "astro/types";
import { getImage } from "astro:assets";
import defaultTheme from "tailwindcss/defaultTheme";
import {
  transformStoryblokImage,
  type TransformImageOptions,
} from "~/lib/utils";

type Props = HTMLAttributes<"img"> & {
  src: string;
  alt: string;
  breakpoints: {
    /**0px - 640px*/
    sm?: BreakpointOptions;
    /**641px - 768px*/
    md?: BreakpointOptions;
    /**769px - 1024px*/
    lg?: BreakpointOptions;
    /**1025px - 1280px*/
    xl?: BreakpointOptions;
    /**1281px - 1536px*/
    "2xl"?: BreakpointOptions;
  };
};
type BreakpointOptions = number | TransformImageOptions;

const { src, breakpoints = {}, ...rest } = Astro.props;

const image = await getImage({
  src,
  inferSize: true,
});

const sizes = Object.values(breakpoints).map((sizeOrOptions) => {
  return typeof sizeOrOptions === "object"
    ? sizeOrOptions.width
    : sizeOrOptions;
});

const srcset = Object.entries(defaultTheme.screens)
  .map(([breakpointName, breakpointSize]) => {
    const breakpointIndex = Object.keys(breakpoints).indexOf(breakpointName);
    // @ts-ignore
    const optionsOrSize = breakpoints[breakpointName];
    const size = sizes[breakpointIndex];
    const optionalOptions = {
      ...(typeof optionsOrSize === "object" && optionsOrSize),
    };
    if (size === undefined) return undefined;
    return `${transformStoryblokImage(src, { width: size, ...optionalOptions })} ${breakpointSize.replace("px", "")}w`;
  })
  .filter((val) => val !== undefined)
  .concat(`${src} ${image.options.width}w`)
  .join(", ");

const defaultWidth = image.options.width || 0;
const maxBreakpointsWidth = Math.max(...sizes);
const maxWidth =
  defaultWidth > maxBreakpointsWidth ? defaultWidth : maxBreakpointsWidth;

const { width, height } = image.options;
---

<img
  src={src}
  width={width}
  height={height}
  srcset={srcset}
  sizes=`(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`
  decoding="async"
  loading="lazy"
  {...rest}
/>
