---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {}

const { class: className, ...rest } = Astro.props;
import { parseHTML } from "linkedom";

const html = await Astro.slots.render("default");
const { document } = parseHTML(html);

const slides = [...document.children].map((el) => {
  el.classList.add("embla__slide");
  return el;
});
---

<section class="embla" class:list={[className]} {...rest}>
  <div class="embla__viewport">
    <div class="embla__container">
      {
        slides.map((slide) => (
          <div class="embla__slide">
            <Fragment set:html={slide} />
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .embla {
    width: 100%;
    margin: auto;
    --slide-height: 19rem;
    --slide-spacing: 1rem;
    --slide-size: calc(100% / 10);
  }
  .embla__viewport {
    overflow: hidden;
  }
  .embla__container {
    backface-visibility: hidden;
    display: flex;
    touch-action: pan-y pinch-zoom;
    margin-left: calc(var(--slide-spacing) * -1);
  }
  .embla__slide {
    flex: 0 0 var(--slide-size);
    min-width: 0;
    padding-left: var(--slide-spacing);
  }
</style>
<script>
  import EmblaCarousel from "embla-carousel";

  const rootNode = document.querySelector(".embla")!;
  const viewportNode = rootNode.querySelector<HTMLElement>(".embla__viewport")!;
  const prevButtonNode =
    rootNode.querySelector<HTMLButtonElement>(".embla__prev")!;
  const nextButtonNode =
    rootNode.querySelector<HTMLButtonElement>(".embla__next")!;

  const embla = EmblaCarousel(viewportNode, {
    align: "center",
    loop: true,
    dragFree: true,
  });

  prevButtonNode.addEventListener("click", () => embla.scrollPrev(), false);
  nextButtonNode.addEventListener("click", () => embla.scrollNext(), false);

  const togglePrevNextBtnsState = (): void => {
    if (embla.canScrollPrev()) prevButtonNode.removeAttribute("disabled");
    else prevButtonNode.setAttribute("disabled", "disabled");

    if (embla.canScrollNext()) nextButtonNode.removeAttribute("disabled");
    else nextButtonNode.setAttribute("disabled", "disabled");
  };

  embla
    .on("select", togglePrevNextBtnsState)
    .on("init", togglePrevNextBtnsState)
    .on("reInit", togglePrevNextBtnsState);

  embla.on("destroy", () => {
    prevButtonNode.removeAttribute("disabled");
    nextButtonNode.removeAttribute("disabled");
  });
</script>
