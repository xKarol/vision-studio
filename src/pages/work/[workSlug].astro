---
import { renderRichText, useStoryblokApi } from "@storyblok/astro";
import { Image } from "astro:assets";
import Grid from "~/components/Grid.astro";
import Container from "~/components/ui/Container.astro";
import BaseLayout from "~/layouts/BaseLayout.astro";
import { transformStoryblokImage } from "~/lib/utils";
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async () => {
  const storyblokApi = useStoryblokApi();
  const { data } = await storyblokApi.get("cdn/stories/", {
    version: import.meta.env.DEV ? "draft" : "published",
    starts_with: "work/",
  });

  return data.stories.map((work: any) => {
    const { workName, images, info } = work.content;
    return {
      params: {
        workSlug: work.slug,
      },
      props: { images, workName, info },
    };
  });
}) satisfies GetStaticPaths;

interface Props {
  workName: string;
  images: { filename: string; alt: string }[];
  info: any;
}

const { workName, images, info } = Astro.props;
const renderedRichText = renderRichText(info);
---

<BaseLayout seo={{ title: workName }}>
  <section class="flex flex-col py-8 pb-16 lg:flex-row lg:space-x-8 lg:py-16">
    <Grid>
      {
        images.map((image, index: number) => (
          <div class="flex h-full w-full flex-col space-y-1">
            <Image
              src={transformStoryblokImage(image.filename, { width: 1400 })}
              alt={image.alt}
              class="h-full w-full object-cover"
              inferSize
            />
            <p class="text-[0.625rem] font-semibold uppercase text-neutral-700">
              /{String(index + 1).padStart(2, "0")}
            </p>
          </div>
        ))
      }
    </Grid>
    <Container class="order-first lg:order-1 lg:max-w-[220px] lg:pl-0">
      <aside
        class="static right-0 top-[--header-height] w-full max-w-sm space-y-4 pb-16 text-xs uppercase lg:sticky lg:max-w-[200px]"
      >
        <Fragment set:html={renderedRichText} />
      </aside>
    </Container>
  </section>
</BaseLayout>
