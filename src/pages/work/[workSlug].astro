---
import {
  renderRichText,
  useStoryblokApi,
  type ISbRichtext,
} from "@storyblok/astro";
import Grid from "~/components/Grid.astro";
import Container from "~/components/ui/Container.astro";
import BaseLayout from "~/layouts/BaseLayout.astro";
import {
  transformStoryblokImage,
  type TransformImageOptions,
} from "~/lib/utils";
import type { GetStaticPaths } from "astro";
import ResponsiveImage from "~/components/ui/ResponsiveImage.astro";

export const getStaticPaths = (async () => {
  const storyblokApi = useStoryblokApi();
  const { data } = await storyblokApi.get("cdn/stories/", {
    version: import.meta.env.DEV ? "draft" : "published",
    starts_with: "work/",
  });

  return data.stories.map((work: any) => {
    const { workName, thumbnail, images, info } = work.content;
    return {
      params: {
        workSlug: work.slug,
      },
      props: { images, workName, info, thumbnailUrl: thumbnail.filename },
    };
  });
}) satisfies GetStaticPaths;

interface Props {
  workName: string;
  images: { filename: string; alt: string }[];
  thumbnailUrl: string;
  info: ISbRichtext;
}

const { workName, thumbnailUrl, images, info } = Astro.props;
const renderedRichText = renderRichText(info);

const calcGridImageQuality = (index: number): TransformImageOptions => {
  switch (index) {
    case 2: {
      return {
        quality: 60,
        width: 1200,
      };
    }
    case 3: {
      return {
        quality: 60,
        width: 1000,
      };
    }
    case 5: {
      return {
        quality: 60,
        width: 600,
      };
    }
    default: {
      return {
        quality: 60,
        width: 1400,
      };
    }
  }
};
---

<BaseLayout
  seo={{
    title: workName,
    openGraph: {
      basic: {
        image: thumbnailUrl,
      },
    },
    twitter: {
      image: thumbnailUrl,
    },
  }}
>
  <section class="flex flex-col py-8 pb-16 lg:flex-row lg:space-x-8 lg:py-16">
    <Grid class="w-full">
      {
        images.map((image, index: number) => {
          return (
            <div class="flex h-full w-full flex-col space-y-1">
              <ResponsiveImage
                src={transformStoryblokImage(
                  image.filename,
                  calcGridImageQuality((index % images.length) + 1),
                )}
                breakpoints={{
                  sm: { width: 800, quality: 60 },
                }}
                alt={image.alt}
                class="aspect-[9/12] h-full w-full object-cover"
              />
              <p class="text-[0.625rem] font-semibold uppercase text-neutral-700">
                /{String(index + 1).padStart(2, "0")}
              </p>
            </div>
          );
        })
      }
    </Grid>
    <Container class="order-first lg:order-1 lg:max-w-[220px] lg:pl-0">
      <aside
        class="static right-0 top-[--header-height] w-full max-w-sm space-y-4 pb-16 text-xs uppercase lg:sticky lg:max-w-[200px]"
      >
        <Fragment set:html={renderedRichText} />
      </aside>
    </Container>
  </section>
</BaseLayout>
